#include <bits/stdc++.h>
using namespace std;

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        vector<int> arr;

        for (auto i : lists) {
            while (i != NULL) {
                arr.push_back(i->val);
                i = i->next;
            }
        }

        sort(arr.begin(), arr.end());

        ListNode* dummy = new ListNode(-1);
        ListNode* temp = dummy;

        for (auto i : arr) {
            temp->next = new ListNode(i);
            temp = temp->next;
        }

        return dummy->next;
    }
};

// Function to create a linked list from a vector
ListNode* createLinkedList(vector<int> vals) {
    if (vals.empty()) return nullptr;

    ListNode* head = new ListNode(vals[0]);
    ListNode* temp = head;
    for (int i = 1; i < vals.size(); i++) {
        temp->next = new ListNode(vals[i]);
        temp = temp->next;
    }
    return head;
}

// Function to print a linked list
void printLinkedList(ListNode* head) {
    while (head) {
        cout << head->val << " -> ";
        head = head->next;
    }
    cout << "NULL" << endl;
}

int main() {
    // Creating multiple linked lists
    vector<ListNode*> lists;
    lists.push_back(createLinkedList({1, 4, 5}));
    lists.push_back(createLinkedList({1, 3, 4}));
    lists.push_back(createLinkedList({2, 6}));

    // Merging k sorted linked lists
    Solution sol;
    ListNode* mergedHead = sol.mergeKLists(lists);

    // Printing the merged linked list
    printLinkedList(mergedHead);

    return 0;
}
